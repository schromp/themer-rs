use core::fmt;
use std::{fs::File, io::Write, process::Command};

use log::{debug, error, info};
use serde::Deserialize;

use crate::settings::colorscheme::Colorscheme;

#[derive(Debug, Deserialize)]
pub struct Kitty {
    enable: bool,
    path: String,
    opacity: Option<f32>,
}

enum ValueType {
    Float(f32),
    Color(i32),
}

struct ConfLine {
    name: String,
    value: ValueType,
}

impl fmt::Display for ConfLine {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self.value {
            ValueType::Float(x) => {
                write!(f, "{} {}\n", self.name, x)
            }
            ValueType::Color(x) => {
                write!(f, "{} #{:06x}\n", self.name, x)
            }
        }
    }
}

impl Kitty {
    pub fn apply(&self, colorscheme: Option<&Colorscheme>) {
        if !self.enable {
            debug!("Skipping Kitty because it is not enabled");
            return;
        }

        let mut lines: Vec<ConfLine> = Vec::new();

        match colorscheme {
            Some(colorscheme) => {
                debug!("Generating Kitty <colorscheme>");
                generate_colors(&mut lines, colorscheme);
            }
            None => {
                info!("Skipping Kitty <colorscheme> because no colorscheme defined.")
            }
        }

        if let Some(o) = self.opacity {
            debug!("Genering Kitty <opacity>");
            lines.push(ConfLine {
                name: "background_opacity".to_string(),
                value: ValueType::Float(o),
            });
        } else {
            debug!("Skipping Kitty <opacity>")
        }

        debug!("Creating Kitty theme file at Path: {}", self.path);
        match File::create(&self.path) {
            Ok(mut theme_file) => {
                if let Err(e) = theme_file
                    .write_all(b"# This file is generated by themer. Changes may be overwritten.\n")
                {
                    error!("Error while writing to file {:?}: {}", theme_file, e);
                }

                for line in &lines {
                    if let Err(e) = theme_file.write_all(line.to_string().as_bytes()) {
                        error!("Error while writing to file {:?}: {}", theme_file, e);
                    }
                }

                self.refresh();
            }
            Err(e) => error!("Couldnt access the kitty theme file: {}", e),
        }
    }
    fn refresh(&self) {
        let mut system = sysinfo::System::new();
        system.refresh_all();
        for p in system.processes_by_name("kitty") {
            debug!("Refreshing kitty instance with PID {}", p.pid());
            if let Err(e) = Command::new("kill")
                .args(["-SIGUSR1", &p.pid().to_string()])
                .output()
            {
                error!("Error while refreshing kitty: {}", e)
            }
        }
    }
}

fn generate_colors(lines: &mut Vec<ConfLine>, colorscheme: &Colorscheme) {
    // TODO: This does not look like the best way to do this but vim made writing this fast
    // Refactor this into something more ideomatic
    lines.push(ConfLine {
        name: "background".to_string(),
        value: ValueType::Color(colorscheme.base00),
    });
    lines.push(ConfLine {
        name: "foreground".to_string(),
        value: ValueType::Color(colorscheme.base05),
    });
    lines.push(ConfLine {
        name: "selection_background".to_string(),
        value: ValueType::Color(colorscheme.base05),
    });
    lines.push(ConfLine {
        name: "url_color".to_string(),
        value: ValueType::Color(colorscheme.base04),
    });
    lines.push(ConfLine {
        name: "cursor".to_string(),
        value: ValueType::Color(colorscheme.base05),
    });
    lines.push(ConfLine {
        name: "active_border_color".to_string(),
        value: ValueType::Color(colorscheme.base03),
    });
    lines.push(ConfLine {
        name: "inactive_border_color".to_string(),
        value: ValueType::Color(colorscheme.base01),
    });
    lines.push(ConfLine {
        name: "active_tab_background".to_string(),
        value: ValueType::Color(colorscheme.base00),
    });
    lines.push(ConfLine {
        name: "inactive_tab_background".to_string(),
        value: ValueType::Color(colorscheme.base01),
    });
    lines.push(ConfLine {
        name: "inactive_tab_foreground".to_string(),
        value: ValueType::Color(colorscheme.base04),
    });
    lines.push(ConfLine {
        name: "tab_bar_background".to_string(),
        value: ValueType::Color(colorscheme.base01),
    });
    lines.push(ConfLine {
        name: "wayland_titlebar_color".to_string(),
        value: ValueType::Color(colorscheme.base00),
    });
    lines.push(ConfLine {
        name: "macos_titlebar_color".to_string(),
        value: ValueType::Color(colorscheme.base00),
    });
    lines.push(ConfLine {
        name: "color0".to_string(),
        value: ValueType::Color(colorscheme.base00),
    });
    lines.push(ConfLine {
        name: "color1".to_string(),
        value: ValueType::Color(colorscheme.base08),
    });
    lines.push(ConfLine {
        name: "color2".to_string(),
        value: ValueType::Color(colorscheme.base0b),
    });
    lines.push(ConfLine {
        name: "color3".to_string(),
        value: ValueType::Color(colorscheme.base0a),
    });
    lines.push(ConfLine {
        name: "color4".to_string(),
        value: ValueType::Color(colorscheme.base0d),
    });
    lines.push(ConfLine {
        name: "color5".to_string(),
        value: ValueType::Color(colorscheme.base0e),
    });
    lines.push(ConfLine {
        name: "color6".to_string(),
        value: ValueType::Color(colorscheme.base0c),
    });
    lines.push(ConfLine {
        name: "color7".to_string(),
        value: ValueType::Color(colorscheme.base05),
    });
    lines.push(ConfLine {
        name: "color8".to_string(),
        value: ValueType::Color(colorscheme.base03),
    });
    lines.push(ConfLine {
        name: "color9".to_string(),
        value: ValueType::Color(colorscheme.base09),
    });
    lines.push(ConfLine {
        name: "color10".to_string(),
        value: ValueType::Color(colorscheme.base01),
    });
    lines.push(ConfLine {
        name: "color11".to_string(),
        value: ValueType::Color(colorscheme.base02),
    });
    lines.push(ConfLine {
        name: "color12".to_string(),
        value: ValueType::Color(colorscheme.base04),
    });
    lines.push(ConfLine {
        name: "color13".to_string(),
        value: ValueType::Color(colorscheme.base06),
    });
    lines.push(ConfLine {
        name: "color14".to_string(),
        value: ValueType::Color(colorscheme.base0f),
    });
    lines.push(ConfLine {
        name: "color15".to_string(),
        value: ValueType::Color(colorscheme.base07),
    });
}
