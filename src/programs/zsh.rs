use std::{fs::File, io::Write};

use log::{debug, error, info};
use serde::Deserialize;

use crate::settings::colorscheme::Colorscheme;

#[derive(Debug, Deserialize)]
pub struct Zsh {
    enable: bool,
    path: String,
}

impl Zsh {
    pub fn apply(&self, colorscheme: Option<&Colorscheme>) {
        if !self.enable {
            debug!("Skipping zsh because it is not enabled");
            return;
        }

        match colorscheme {
            Some(colorscheme) => {
                let file_contents = format!(
                    r##" # This file is generated by themer. Changes may be overwritten.

                    COL_NAME='{:06x}'
                    COL_DIR='{:06x}'
                    COL_GIT='{:06x}'
                    "##,
                    colorscheme.base0a, colorscheme.base0d, colorscheme.base0e
                );

                debug!("Writing to zsh theme file {}", self.path);
                match File::create(&self.path) {
                    Ok(mut theme_file) => {
                        if let Err(e) = theme_file.write_all(&file_contents.as_bytes()) {
                            error!("Error while writing to file {:?}: {}", theme_file, e);
                        }
                    }
                    Err(e) => error!("Couldnt access zsh theme file: {}", e),
                }
            }
            None => info!("Skipping zsh because no colorscheme is defined"),
        }
    }

}
