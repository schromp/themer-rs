use std::{fs::File, io::Write, process::Command};

use log::{debug, error, info};
use serde::Deserialize;

use crate::settings::colorscheme::Colorscheme;

#[derive(Debug, Deserialize)]
pub struct Tmux {
    enable: bool,
    path: String,
}

impl Tmux {
    pub fn apply(&self, colorscheme: Option<&Colorscheme>) {
        if !self.enable {
            debug!("Skipping tmux because it is not enabled");
            return;
        }

        match colorscheme {
            Some(colorscheme) => {
                let file_contents = format!(
                    r##" # This file is generated by themer. Changes may be overwritten.

                    set-window-option -g window-status-current-style fg="#{:06x}"
                    set -g status-bg "#{:06x}"
                    set -g status-fg "#{:06x}"

                    set-option -g pane-active-border-style fg='#{:06x}'
                    "##,
                    colorscheme.base08, colorscheme.base01, colorscheme.base05, colorscheme.base0d
                );

                match File::create(&self.path) {
                    Ok(mut theme_file) => {
                        if let Err(e) = theme_file.write_all(&file_contents.as_bytes()) {
                            error!("Error while writing to file {:?}: {}", theme_file, e);
                        }
                    }
                    Err(e) => error!("Couldnt access tmux theme file: {}", e),
                }

                self.refresh();
            }
            None => info!("Skipping tmux because no colorscheme is defined"),
        }
    }

    fn refresh(&self) {
        debug!("Refreshing tmux config");
        if let Err(e) = Command::new("tmux").args(["source-file", &self.path]).output() {
            error!("Error while updating tmux: {}", e);
        }
    }
}
